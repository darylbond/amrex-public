<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1IntVect" kind="class" language="C++" prot="public">
    <compoundname>amrex::IntVect</compoundname>
    <includes refid="AMReX__IntVect_8H" local="no">AMReX_IntVect.H</includes>
    <innerclass refid="classamrex_1_1IntVect_1_1shift__hasher" prot="public">amrex::IntVect::shift_hasher</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1IntVect_1a0da0ad772b267330594cbcc72bb48c5c" prot="public" static="no">
        <type><ref refid="classamrex_1_1IntVect_1_1shift__hasher" kindref="compound">shift_hasher</ref></type>
        <definition>using amrex::IntVect::hasher =  shift_hasher</definition>
        <argsstring></argsstring>
        <name>hasher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntVect_1a5b50f516a319513a10154ef402c2717b" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>const IntVect amrex::IntVect::Zero</definition>
        <argsstring></argsstring>
        <name>Zero</name>
        <initializer>= <ref refid="classamrex_1_1IntVect_1ac6662b7a8729bb7d3790a81559b79cbb" kindref="member">IntVect::TheZeroVector</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> all of whose components are equal to zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="62" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntVect_1a93df7e94c6d2d07ea3eb7647500bf751" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>const IntVect amrex::IntVect::Unit</definition>
        <argsstring></argsstring>
        <name>Unit</name>
        <initializer>= <ref refid="classamrex_1_1IntVect_1a9be1f208f435dd8f579c07af1d1b1253" kindref="member">IntVect::TheUnitVector</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> all of whose components are equal to one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntVect_1aa90d26b430997cad2cfb8c21f6fb2e22" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::IntVect::vect[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>vect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="527" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="527" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1IntVect_1adccd37eeac931837d637545e8eba842e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></type>
        <definition>MPI_Datatype ParallelDescriptor::Mpi_typemap</definition>
        <argsstring>()</argsstring>
        <name>ParallelDescriptor::Mpi_typemap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="35" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1IntVect_1a00108a6b83c8c90366f3aa103fc834cb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IntVect &amp;iv)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="524" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="16" bodyend="25"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1IntVect_1a1da4bfe27f128e362972e3ed4156e6f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IntVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="525" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="30" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IntVect_1a698ae35b64ba3caefb08666249e6edb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::IntVect::IntVect</definition>
        <argsstring>() noexcept</argsstring>
        <name>IntVect</name>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> whose components are all zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aa22c324e7128b3164d547b0723b4b2d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::IntVect::IntVect</definition>
        <argsstring>(AMREX_D_DECL(int i, int j, int k)) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(int i, int j, int k)</type>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> given the specific values for its coordinates. AMREX_D_DECL is a macro that sets the constructor to take AMREX_SPACEDIM arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae9684c0f49b86a16a696f99521290fe9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::IntVect::IntVect</definition>
        <argsstring>(const int *a) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> setting the coordinates to the corresponding values in the integer array a. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a964cade2a31b2c82990dcb7726dd5d1d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntVect::IntVect</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;a) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> from an <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref>. It is an error if the <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref> doesn&apos; t have the same dimension as this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="102" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1addf6e967457cdc48def7f89cdd6e3423" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntVect::IntVect</definition>
        <argsstring>(const Array&lt; int, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; int, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> from an Array&lt;int,AMREX_SPACEDIM&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="109" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="109" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a268f9db4f5d0a78aeeebc3bb8f33081c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Dim3 amrex::IntVect::dim3</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dim3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="115" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a8b1db956b695663c7a75a0d11106e4fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE int amrex::IntVect::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sum of all components of this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="130" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ab3bf9b912e3ba519a4799d2bfd82fffc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE int amrex::IntVect::max</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max</name>
        <briefdescription>
<para>maximum (no absolute values) value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="138" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="138" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a59b3f72c69e4e64d6b7841cc5bd5119d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE int amrex::IntVect::min</definition>
        <argsstring>() const noexcept</argsstring>
        <name>min</name>
        <briefdescription>
<para>minimum (no absolute values) value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="152" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="152" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a750ffa7edd4acc720c7cdddec6690f05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> int</type>
        <definition>AMREX_INLINE int amrex::IntVect::maxDir</definition>
        <argsstring>(bool a_doAbsValue) const noexcept</argsstring>
        <name>maxDir</name>
        <param>
          <type>bool</type>
          <declname>a_doAbsValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="166" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="555" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a4bca4c9e58bdc48003b232c3e4684845" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int&amp; amrex::IntVect::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the i&apos;th coordinate of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="170" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1af90cb33f3f87b373541ef1599c7f3ba4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const int &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int&amp; amrex::IntVect::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the i&apos;th coordinate of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="174" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a057c234a61ff795c4f2b2637eaa1395e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::setVal</definition>
        <argsstring>(int i, int val) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set i&apos;th coordinate of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="178" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a1ca89f99ef866fc10c2eb9130ea9983d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE const int* amrex::IntVect::getVect</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>getVect</name>
        <briefdescription>
<para>Returns a const pointer to an array of coordinates of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. Useful for arguments to FORTRAN calls. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="188" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1acb3f2aeb1a815e4ee0a420d85d0889f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> int *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE int* amrex::IntVect::getVect</definition>
        <argsstring>()&amp;noexcept</argsstring>
        <name>getVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="190" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a77db629019eeac0383e74a8007df7512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int *</type>
        <definition>AMREX_GPU_HOST_DEVICE int* amrex::IntVect::getVect</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>getVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a09ecb1037020a28be337135503f7185e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::operator==</definition>
        <argsstring>(int val) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns true if all components are equal to the argument val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="196" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a2c927dc5cad880ea3850650dea0a1fc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::operator!=</definition>
        <argsstring>(int val) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns true if any component is not equal to the argument val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="203" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a409bb3666aaac3e01a6cb0cf9ae44c12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::operator==</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is equivalent to rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="210" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1af63e5fa513b078d7361f869edac883c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::operator!=</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is different from rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="216" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a1b567351d6cef851cf5e8671b4ea1fd1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::operator&lt;</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return ture if this is lexicographically less than rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="222" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="222" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a75001b2ed386536e84b530e7bf34c2b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::operator&lt;=</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if this is lexicographically less than or equal to rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="235" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae51924a7d177d3c3f4d2cd6753c52361" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::operator&gt;</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Retrun true if this is lexicographically greater than rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a381838d9c4c1b6094d7e921fdcb61147" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::operator&gt;=</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Retrun true if this is lexicographically greater than or equal to rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="247" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a5f5612775af4288baa95b12020f6d9ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::allLT</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is less than argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="256" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a7c950aec67e7af286250bf28efb831e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::allLE</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is less than or equal to argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="265" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aae29530da7360af67a6d1b33b16abc23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::allGT</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is greater than argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="274" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a09c05f3c278a867594390252ef348e1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IntVect::allGE</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is greater than or equal to argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="283" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a55fe07a9f9ea98217903782fbed199f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE const IntVect amrex::IntVect::operator+</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator+</name>
        <briefdescription>
<para>Unary plus <ndash/> for completeness. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="289" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a3587cfae802878a37dac1084dcd4426c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::IntVect::operator-</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Unary Minus <ndash/> negates all components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="292" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="292" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a6e634f42f549105e7e33149d505e0f82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::operator+=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by addition of a scalar to each component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a1cb00f85af42c07d6777adca0ba4d754" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::operator+=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise addition with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="301" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae904dceb67c9f6c623b256b5f7fd80aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::operator*=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by multiplication of a scalar to each component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1afc712cd132209b38e53c6c84fc8c6e43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::operator*=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise multiplication with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="313" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a2b30f3e69fa17b97a83e4b05a88ae8fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::operator/=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by division by a scalar to each component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="319" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aec9ef2804bc763e07c9afd16522b06e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::operator/=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise division with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="325" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae30038bc92b2c336276ceeafa01c3370" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::operator-=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by subtraction of a scalar to each component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="331" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1abf15f636b25cdcf3df65f150efe98be7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::operator-=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise subtraction with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="337" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a2772c021ce93ad182f45132d82d02162" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::IntVect::operator+</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise sum of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="343" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a2a4ce0a303b6d0cf018db7369781e99e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::IntVect::operator+</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> + s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="349" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae19c54e5c4d73fa28f3592d34f3487cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::IntVect::operator-</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise difference of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="355" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1adf8f19f9db7701e805de9aa7b78dcda3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::IntVect::operator-</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> - s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="361" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a9f76438892915111dc98d1a84751d243" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::IntVect::operator*</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise product of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="367" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a451cf44629f4752e6c89112d7fa1c49c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::IntVect::operator*</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns component-wise product of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="373" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a9b559dfe2404c666cd46f5d31a695707" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::IntVect::operator/</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise division of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="379" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aecd10010856465b10fa968202fca3c72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::IntVect::operator/</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns component-wise division of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="385" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a544ff1ec357938b686c30060cd2e2be1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::min</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by taking component-wise min with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="391" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="391" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a5d7910051074c52afddbc66623494336" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::max</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by taking component-wise max with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="400" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="400" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a87c2e928fd7dcb95b620a81bc6b099ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::scale</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>scale</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by multiplying each coordinate by s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="409" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="409" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a3a49a4cb03e07231b98aff4cf2b546d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::reflect</definition>
        <argsstring>(int ref_ix, int idir) noexcept</argsstring>
        <name>reflect</name>
        <param>
          <type>int</type>
          <declname>ref_ix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by reflecting it in the plane defined by the index ref_ix and with normal in the direction of idir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="415" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aa9803c8b7b2926299c58e658088be7db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::shift</definition>
        <argsstring>(int coord, int s) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>int</type>
          <declname>coord</declname>
        </param>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by adding s to given coordinate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="423" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a6c37e12d98b97002bf89c503b0c064e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::shift</definition>
        <argsstring>(const IntVect &amp;iv) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Equivalent to shift(0,iv[0]).shift(1,iv[1]) ... </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="429" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="429" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a1d8cb7cc5f3c974bbba4bbfc0ebaae5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect&amp; amrex::IntVect::diagShift</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>diagShift</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by adding s to each coordinate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="432" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a12d3e367640c1ed999ae4b05a5611e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_INLINE IntVect &amp; amrex::IntVect::coarsen</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise integer projection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="438" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="540" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a2eac6014652f412ea98bc81a7934ea9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_INLINE IntVect &amp; amrex::IntVect::coarsen</definition>
        <argsstring>(int p) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise integer projection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="441" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="532" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ab475947988193854e6da058ff62d1ab4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>AMREX_INLINE void amrex::IntVect::linearOut</definition>
        <argsstring>(void *a_buffer) const noexcept</argsstring>
        <name>linearOut</name>
        <param>
          <type>void *</type>
          <declname>a_buffer</declname>
        </param>
        <briefdescription>
<para>for serialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="452" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="589" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a7edd97722920f0e96ef81be04e7f1ca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>AMREX_INLINE void amrex::IntVect::linearIn</definition>
        <argsstring>(void *a_buffer) noexcept</argsstring>
        <name>linearIn</name>
        <param>
          <type>void *</type>
          <declname>a_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="453" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="602" bodyend="611"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1IntVect_1aee066010c6492129ab20b3d26df6d4f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref></type>
        <definition>static size_t AMREX_INLINE amrex::IntVect::linearSize</definition>
        <argsstring>() noexcept</argsstring>
        <name>linearSize</name>
        <briefdescription>
<para>for serialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="445" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="445" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ac6662b7a8729bb7d3790a81559b79cbb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE constexpr IntVect amrex::IntVect::TheZeroVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheZeroVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to zero (0). Figuratively, it is the zero vector in AMREX_SPACEDIM-dimensional space. It is provided as a convenient way to specify the zero vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="462" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="462" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a9be1f208f435dd8f579c07af1d1b1253" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE constexpr IntVect amrex::IntVect::TheUnitVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheUnitVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to one (1). Figuratively, it is the unit vector in AMREX_SPACEDIM-dimensional space. It is provided as a convenient way to specify the unit vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="472" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="472" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aa8f51564ef0e0a9c340350f0bd46ea29" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE constexpr IntVect amrex::IntVect::TheDimensionVector</definition>
        <argsstring>(int d) noexcept</argsstring>
        <name>TheDimensionVector</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to zero except that the d-direction is set to one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="481" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="481" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a22bbb4671a41570c840af20e78539961" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE constexpr IntVect amrex::IntVect::TheNodeVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheNodeVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea410f04417a9413c9d3d862e84300eb05" kindref="member">IndexType::NODE</ref>. It is provided as a convenience to our users when defining Boxes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="492" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="492" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aad345711f51e972a5e2deef6270f5adc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE constexpr IntVect amrex::IntVect::TheCellVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheCellVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea287ace89f7ffd266daab1798b3d48aa1" kindref="member">IndexType::CELL</ref>. It is provided as a convenience to our users when defining Boxes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="501" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="501" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aef5e45bf793c19542389df9496f15074" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE constexpr IntVect amrex::IntVect::TheMaxVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheMaxVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="506" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="506" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a7f2c63dec83e6356f8c48a591301a71a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE constexpr IntVect amrex::IntVect::TheMinVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheMinVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="514" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="514" bodyend="520"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An Integer <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> in SPACEDIM-Dimensional Space</para><para>The class <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> is an implementation of an integer vector in a SPACEDIM-dimensional space. It represents a point in a discrete space. <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> values are accessed using the operator[] function, as for a normal C++ array. In addition, the basic arithmetic operators have been overloaded to implement scaling and translation operations. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="3537">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="3537" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="33" bodyend="528"/>
    <listofallmembers>
      <member refid="classamrex_1_1IntVect_1a09c05f3c278a867594390252ef348e1f" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allGE</name></member>
      <member refid="classamrex_1_1IntVect_1aae29530da7360af67a6d1b33b16abc23" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allGT</name></member>
      <member refid="classamrex_1_1IntVect_1a7c950aec67e7af286250bf28efb831e8" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allLE</name></member>
      <member refid="classamrex_1_1IntVect_1a5f5612775af4288baa95b12020f6d9ad" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allLT</name></member>
      <member refid="classamrex_1_1IntVect_1a12d3e367640c1ed999ae4b05a5611e83" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1IntVect_1a2eac6014652f412ea98bc81a7934ea9d" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1IntVect_1a1d8cb7cc5f3c974bbba4bbfc0ebaae5a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>diagShift</name></member>
      <member refid="classamrex_1_1IntVect_1a268f9db4f5d0a78aeeebc3bb8f33081c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>dim3</name></member>
      <member refid="classamrex_1_1IntVect_1a1ca89f99ef866fc10c2eb9130ea9983d" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVect_1acb3f2aeb1a815e4ee0a420d85d0889f8" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVect_1a77db629019eeac0383e74a8007df7512" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVect_1a0da0ad772b267330594cbcc72bb48c5c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>hasher</name></member>
      <member refid="classamrex_1_1IntVect_1a698ae35b64ba3caefb08666249e6edb3" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1aa22c324e7128b3164d547b0723b4b2d4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1ae9684c0f49b86a16a696f99521290fe9" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1a964cade2a31b2c82990dcb7726dd5d1d" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1addf6e967457cdc48def7f89cdd6e3423" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1a7edd97722920f0e96ef81be04e7f1ca5" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>linearIn</name></member>
      <member refid="classamrex_1_1IntVect_1ab475947988193854e6da058ff62d1ab4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>linearOut</name></member>
      <member refid="classamrex_1_1IntVect_1aee066010c6492129ab20b3d26df6d4f3" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>linearSize</name></member>
      <member refid="classamrex_1_1IntVect_1ab3bf9b912e3ba519a4799d2bfd82fffc" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>max</name></member>
      <member refid="classamrex_1_1IntVect_1a5d7910051074c52afddbc66623494336" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>max</name></member>
      <member refid="classamrex_1_1IntVect_1a750ffa7edd4acc720c7cdddec6690f05" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>maxDir</name></member>
      <member refid="classamrex_1_1IntVect_1a59b3f72c69e4e64d6b7841cc5bd5119d" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>min</name></member>
      <member refid="classamrex_1_1IntVect_1a544ff1ec357938b686c30060cd2e2be1" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>min</name></member>
      <member refid="classamrex_1_1IntVect_1a2c927dc5cad880ea3850650dea0a1fc0" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IntVect_1af63e5fa513b078d7361f869edac883c4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IntVect_1a9f76438892915111dc98d1a84751d243" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1IntVect_1a451cf44629f4752e6c89112d7fa1c49c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1IntVect_1ae904dceb67c9f6c623b256b5f7fd80aa" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1IntVect_1afc712cd132209b38e53c6c84fc8c6e43" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1IntVect_1a55fe07a9f9ea98217903782fbed199f4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVect_1a2772c021ce93ad182f45132d82d02162" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVect_1a2a4ce0a303b6d0cf018db7369781e99e" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVect_1a6e634f42f549105e7e33149d505e0f82" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1IntVect_1a1cb00f85af42c07d6777adca0ba4d754" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1IntVect_1a3587cfae802878a37dac1084dcd4426c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVect_1ae19c54e5c4d73fa28f3592d34f3487cd" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVect_1adf8f19f9db7701e805de9aa7b78dcda3" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVect_1ae30038bc92b2c336276ceeafa01c3370" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1IntVect_1abf15f636b25cdcf3df65f150efe98be7" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1IntVect_1a9b559dfe2404c666cd46f5d31a695707" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1IntVect_1aecd10010856465b10fa968202fca3c72" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1IntVect_1a2b30f3e69fa17b97a83e4b05a88ae8fa" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1IntVect_1aec9ef2804bc763e07c9afd16522b06e9" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1IntVect_1a1b567351d6cef851cf5e8671b4ea1fd1" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1IntVect_1a00108a6b83c8c90366f3aa103fc834cb" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1IntVect_1a75001b2ed386536e84b530e7bf34c2b3" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1IntVect_1a09ecb1037020a28be337135503f7185e" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IntVect_1a409bb3666aaac3e01a6cb0cf9ae44c12" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IntVect_1ae51924a7d177d3c3f4d2cd6753c52361" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1IntVect_1a381838d9c4c1b6094d7e921fdcb61147" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1IntVect_1a1da4bfe27f128e362972e3ed4156e6f1" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1IntVect_1a4bca4c9e58bdc48003b232c3e4684845" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1IntVect_1af90cb33f3f87b373541ef1599c7f3ba4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1IntVect_1adccd37eeac931837d637545e8eba842e" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>ParallelDescriptor::Mpi_typemap</name></member>
      <member refid="classamrex_1_1IntVect_1a3a49a4cb03e07231b98aff4cf2b546d3" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>reflect</name></member>
      <member refid="classamrex_1_1IntVect_1a87c2e928fd7dcb95b620a81bc6b099ec" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>scale</name></member>
      <member refid="classamrex_1_1IntVect_1a057c234a61ff795c4f2b2637eaa1395e" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>setVal</name></member>
      <member refid="classamrex_1_1IntVect_1aa9803c8b7b2926299c58e658088be7db" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>shift</name></member>
      <member refid="classamrex_1_1IntVect_1a6c37e12d98b97002bf89c503b0c064e1" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>shift</name></member>
      <member refid="classamrex_1_1IntVect_1a8b1db956b695663c7a75a0d11106e4fe" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>sum</name></member>
      <member refid="classamrex_1_1IntVect_1aad345711f51e972a5e2deef6270f5adc" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheCellVector</name></member>
      <member refid="classamrex_1_1IntVect_1aa8f51564ef0e0a9c340350f0bd46ea29" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheDimensionVector</name></member>
      <member refid="classamrex_1_1IntVect_1aef5e45bf793c19542389df9496f15074" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheMaxVector</name></member>
      <member refid="classamrex_1_1IntVect_1a7f2c63dec83e6356f8c48a591301a71a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheMinVector</name></member>
      <member refid="classamrex_1_1IntVect_1a22bbb4671a41570c840af20e78539961" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheNodeVector</name></member>
      <member refid="classamrex_1_1IntVect_1a9be1f208f435dd8f579c07af1d1b1253" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheUnitVector</name></member>
      <member refid="classamrex_1_1IntVect_1ac6662b7a8729bb7d3790a81559b79cbb" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheZeroVector</name></member>
      <member refid="classamrex_1_1IntVect_1a93df7e94c6d2d07ea3eb7647500bf751" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>Unit</name></member>
      <member refid="classamrex_1_1IntVect_1aa90d26b430997cad2cfb8c21f6fb2e22" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>vect</name></member>
      <member refid="classamrex_1_1IntVect_1a5b50f516a319513a10154ef402c2717b" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
